unit injectModule;

interface
  //取得好友列表

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, tlhelp32,
  PsAPI, Vcl.StdCtrls, Vcl.ExtCtrls, u_debug, DDetours, Method2,
  Generics.Collections, wxCore;

var
  OldFuncAddr: dword;
  OldFunc: pointer;   //  OldFuncAddr   call OldFunc
  OldInstructionBackUp: array[0..4] of Byte; //老指令备份
  JumpBackAddress: dword;
  str: string;
  ddd: PChar;
  mystr: string;
  data_base: dword;

implementation

uses
  Method1, Method3;

procedure show_item_data();
var
  len: Cardinal;
  p1: Nativeuint;
  mygod: pchar;
begin

//    form2.ListBox1.Items.Insert(0, v.ToString);
  len := PDWORD(data_base + 4 + 4 + 4)^;   // wxid_len
//  len := PDWORD(v + 4 + 4 + 4)^;   // wxid_len
//
  p1 := data_base + 4 + 4;
  mygod := PChar(Pointer((@p1)^)^);
//  form2.ListBox1.Items.Insert(0, '--->wxid' + mygod);

  p1 := data_base + $64;
  var nickname := PChar(Pointer((@p1)^)^);

  var sum_vv := nickname + ' ' + mygod;
//listbox1.Items.IndexOf('重复的字符')=   -1     表示没有重复
//  if  form2.ListBox1.Items.IndexOf(sum_vv)=-1 then
//       form2.ListBox1.Items.Insert(0, sum_vv);
//    form2.ListBox1.Items.Insert(0, len.ToString);
end;

procedure NewFuncAddr();
asm
        pushad
        mov     data_base, esi
        call    show_item_data
        popad
        call    OldFunc; //  HookAddressSave;
        jmp     JumpBackAddress
end;

procedure UnHook;
  //复原
begin
  var xv: SIZE_T;
  WriteProcessMemory(GetCurrentProcess(), Pointer(OldFuncAddr), @OldInstructionBackUp, 5, xv);
end;

initialization
  g_baseaddr := GetModuleHandle('WeChatWin.dll');
  OldFuncAddr := g_baseaddr + $5244a8;

  OldFunc := Pointer(g_baseaddr + $64550);

  JumpBackAddress := OldFuncAddr + SizeOf(TInstruction);  // +5  跳回地址继续执行
//  保留原来的地址指令     复原使用
  CopyMemory(@OldInstructionBackUp, Pointer(OldFuncAddr), 5);  //memcpy


  f3(@NewFuncAddr, Pointer(OldFuncAddr));

end.

